'number' + 3 + 3; /* number33 = конкатенація*/

null + 3;  /* 3 = поскольку null у нас в js это 0 мы получаем такое выражение  0+3=3 */

5 && "qwerty"; /* qwerty = т.к. && если доходит до конца выводит последнее значение */

+'40' + +'2' + "hillel"; /* 42hillel = т.к. унарный плюс стринг делает намбер и просто прибавляет два числа а затем конкатенація */

'10' - 5 === 6; /* false = (===-оператор который приравнивает не только значения но и тип данных) изходя из этого мы в первой части имеем 
стринг и число а во второй части только число поэтому фолс */

true + false; /* 1 = т.к. тру у нас 1 а фолс у нас 0 то 1+0=1 */

'4px' - 3; /*  NaN =  когда js не получается приравнять значение к числу то он выдает NaN что означает не число, первое значение у нас не 
является числом поэтому дальше он не идет, если убрать px то результат будет 1 */

'4' - 3; /*  1 = как я написала выше, js приравнивает к числу, если ему удается то не важно что число написано стрингой оно все равно будет работать как число */

'6' + 3 ** 0; /* 61 = это возведение в степень, идет с права на лево, таким образом сначала происходит возведение в степень 3 ** 0 что дает 
на 1 а затем происходит конкатенация и к 6 поскольку записана как стринг просто додается 1 */

12 / '6'; /* 2 = опять преорбаррозании строки в число, и того 12 просто делим на 6 */

'10' + (5 === 6); /* 10false = т.к. первая часть у нас стринг (вторая часть при сравнении числа и типа получается  false т.к. 5 не равняется 6) 
у нас происходит просто конкатенация */

null == ''; /*false = null у нас приравнивается к 0 и получается число а пробел просто пустата, если вместо пробела там будет 0 то результат будет true */

3 ** (9 / 3); /* 27 = возведение в степень */

!!'false' == !!'true'; /* true = !! используется для приведение значания к логическому типу, таким образом любая не пустая строка будет считаться 
true, при сравнении true и true у нас получается true */

0 || '0' && 1; /* 1 = оператор или возвращает true если хотя бы одно значение true, оператор и возвращает true если оба значения true, таким образом если 
мы доходим до конца то будет 1. У нас сначала по идеи должен сработать оператор и, у нас выведет 1 а при операции или 0 является фолс а 1 тру, и тогда 
получается что ответ будет 1, так как это первое истиное значение. */

(+null == false) < 1; /*false = в скобочках при приведении значений к числу мы получаем 0 и 0 при сравнении этих числе у нас получается тру, если преобразовывать 
тру в число оно у нас дает 1 и таким образом получается выражение 1<1 а это фолс */

false && true || true /* true = тут получается при сравнении первой операции фолс и тру у нас получается фолс, т.к. оператор и выводит первое фолс или последнее 
тру, у нас получается фолс. а при втором сравнении оператора и у нас получается тру т.к. оператор и выводит первое тру */

false && (false || true); /*false = сначала выражение в скобочках у нас будет тру, а при операции с оператором и фолс и тру у нас будет фолс, т.к. если хоть 
одно значение фолс у нас получается фолс */

(+null == false) < 1 ** 5; /*false = т.к. из примера выше мы знаем что выражение в скобочках нам дает тру, а при возведении встепень мы получаем 1 то наш 
пример принимает вид 1 < 1 что дает на фолс. */